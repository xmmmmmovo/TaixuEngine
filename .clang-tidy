---
Checks: cppcoreguidelines-*,
  performance-*,
  portability-*,

  misc-misplaced-const,
  misc-new-delete-overloads,
  misc-no-recursion,
  misc-non-copyable-objects,
  misc-throw-by-value-catch-by-reference,
  misc-unconventional-assign-operator,
  misc-uniqueptr-reset-release,
  misc-redundant-expression,
  misc-static-assert,
  misc-unused-alias-decls,
  misc-unused-parameters,
  misc-unused-using-decls,
  misc-const-correctness,
  misc-use-anonymous-namespace,

  modernize-avoid-c-arrays,
  modernize-avoid-bind,
  modernize-concat-nested-namespaces,
  modernize-deprecated-headers,
  modernize-deprecated-ios-base-aliases,
  modernize-loop-convert,
  modernize-make-shared,
  modernize-make-unique,
  modernize-pass-by-value,
  modernize-raw-string-literal,
  modernize-redundant-void-arg,
  modernize-replace-auto-ptr,
  modernize-replace-disallow-copy-and-assign-macro,
  modernize-replace-random-shuffle,
  modernize-return-braced-init-list,
  modernize-shrink-to-fit,
  modernize-unary-static-assert,
  modernize-use-auto,
  modernize-use-bool-literals,
  modernize-use-emplace,
  modernize-use-equals-default,
  modernize-use-equals-delete,
  modernize-use-nodiscard,
  modernize-use-noexcept,
  modernize-use-nullptr,
  modernize-use-override,
  modernize-use-transparent-functors,
  modernize-use-uncaught-exceptions,

  readability-braces-around-statements,
  readability-magic-numbers,
  readability-named-parameter,
  readability-redundant-declaration,
  readability-function-cognitive-complexity,
  readability-avoid-const-params-in-decls,
  readability-const-return-type,
  readability-container-size-empty,
  readability-convert-member-functions-to-static,
  readability-delete-null-pointer,
  readability-deleted-default,
  readability-inconsistent-declaration-parameter-name,
  readability-make-member-function-const,
  readability-misleading-indentation,
  readability-misplaced-array-index,
  readability-non-const-parameter,
  readability-redundant-control-flow,
  readability-redundant-function-ptr-dereference,
  readability-redundant-smartptr-get,
  readability-redundant-string-cstr,
  readability-redundant-string-init,
  readability-simplify-subscript-expr,
  readability-static-accessed-through-instance,
  readability-static-definition-in-anonymous-namespace,
  readability-string-compare,
  readability-uniqueptr-delete-release,
  readability-use-anyofallof,
  readability-identifier-naming,

  cert-dcl21-cpp,
  cert-dcl58-cpp,
  cert-err34-c,
  cert-err52-cpp,
  cert-err60-cpp,
  cert-flp30-c,
  cert-msc50-cpp,
  cert-msc51-cpp,
  cert-str34-c,
  cert-msc24-c,
  cert-msc33-c,
  cert-dcl50-cpp,
  cert-env33-c,
  cert-mem57-cpp,
  cert-oop58-cpp,

  hicpp-exception-baseclass,
  hicpp-multiway-paths-covered,

  google-build-explicit-make-pair,
  google-build-namespaces,
  google-default-arguments,
  google-explicit-constructor,
  google-readability-casting,
  google-readability-avoid-underscore-in-googletest-name,
  google-runtime-int,
  google-runtime-operator,
  google-readability-braces-around-statements,
  google-readability-namespace-comments,
  google-runtime-references,

  bugprone-undelegated-constructor,
  bugprone-argument-comment,
  bugprone-bad-signal-to-kill-thread,
  bugprone-bool-pointer-implicit-conversion,
  bugprone-copy-constructor-init,
  bugprone-dangling-handle,
  bugprone-forward-declaration-namespace,
  bugprone-fold-init-type,
  bugprone-inaccurate-erase,
  bugprone-incorrect-roundings,
  bugprone-infinite-loop,
  bugprone-integer-division,
  bugprone-macro-parentheses,
  bugprone-macro-repeated-side-effects,
  bugprone-misplaced-operator-in-strlen-in-alloc,
  bugprone-misplaced-pointer-artithmetic-in-alloc,
  bugprone-misplaced-widening-cast,
  bugprone-move-forwarding-reference,
  bugprone-multiple-statement-macro,
  bugprone-parent-virtual-call,
  bugprone-posix-return,
  bugprone-reserved-identifier,
  bugprone-signed-char-misuse,
  bugprone-sizeof-container,
  bugprone-sizeof-expression,
  bugprone-string-constructor,
  bugprone-string-integer-assignment,
  bugprone-string-literal-with-embedded-nul,
  bugprone-suspicious-enum-usage,
  bugprone-suspicious-include,
  bugprone-suspicious-memset-usage,
  bugprone-suspicious-missing-comma,
  bugprone-suspicious-string-compare,
  bugprone-swapped-arguments,
  bugprone-terminating-continue,
  bugprone-throw-keyword-missing,
  bugprone-too-small-loop-variable,
  bugprone-undefined-memory-manipulation,
  bugprone-unhandled-self-assignment,
  bugprone-unused-raii,
  bugprone-unused-return-value,
  bugprone-use-after-move,
  bugprone-virtual-near-miss,

  clang-analyzer-core.CallAndMessage,
  clang-analyzer-core.DivideZero,
  clang-analyzer-core.NonNullParamChecker,
  clang-analyzer-core.NullDereference,
  clang-analyzer-core.StackAddressEscape,
  clang-analyzer-core.UndefinedBinaryOperatorResult,
  clang-analyzer-core.VLASize,
  clang-analyzer-core.uninitialized.ArraySubscript,
  clang-analyzer-core.uninitialized.Assign,
  clang-analyzer-core.uninitialized.Branch,
  clang-analyzer-core.uninitialized.CapturedBlockVariable,
  clang-analyzer-core.uninitialized.UndefReturn,
  clang-analyzer-cplusplus.InnerPointer,
  clang-analyzer-cplusplus.NewDelete,
  clang-analyzer-cplusplus.NewDeleteLeaks,
  clang-analyzer-cplusplus.PlacementNewChecker,
  clang-analyzer-cplusplus.SelfAssignment,
  clang-analyzer-deadcode.DeadStores,
  clang-analyzer-optin.cplusplus.VirtualCall,
  clang-analyzer-security.insecureAPI.UncheckedReturn,
  clang-analyzer-security.insecureAPI.bcmp,
  clang-analyzer-security.insecureAPI.bcopy,
  clang-analyzer-security.insecureAPI.bzero,
  clang-analyzer-security.insecureAPI.getpw,
  clang-analyzer-security.insecureAPI.gets,
  clang-analyzer-security.insecureAPI.mkstemp,
  clang-analyzer-security.insecureAPI.mktemp,
  clang-analyzer-security.insecureAPI.rand,
  clang-analyzer-security.insecureAPI.strcpy,
  clang-analyzer-unix.Malloc,
  clang-analyzer-unix.MallocSizeof,
  clang-analyzer-unix.MismatchedDeallocator,
  clang-analyzer-unix.Vfork,
  clang-analyzer-unix.cstring.BadSizeArg,
  clang-analyzer-unix.cstring.NullArg

  -cppcoreguidelines-macro-usage

# Turn all the warnings from the checks above into errors.
WarningsAsErrors: "*"

CheckOptions:
  readability-identifier-naming.NamespaceCase: lower_case
  readability-identifier-naming.ClassCase: CamelCase
  readability-identifier-naming.StructCase: CamelCase
  readability-identifier-naming.TemplateParameterCase: CamelCase
  readability-identifier-naming.FunctionCase: aNy_CasE
  readability-identifier-naming.VariableCase: lower_case
  readability-identifier-naming.ClassMemberCase: lower_case
  readability-identifier-naming.PrivateMemberPrefix: _
  readability-identifier-naming.ClassMethodCase: camelBack
  readability-identifier-naming.EnumConstantCase: UPPER_CASE
  readability-identifier-naming.ConstexprVariableCase: UPPER_CASE
  readability-identifier-naming.GlobalConstantCase: UPPER_CASE
  readability-identifier-naming.MemberConstantCase: lower_case
  readability-identifier-naming.MemberConstantPrefix: k
  readability-identifier-naming.StaticConstantCase: lower_case
  readability-identifier-naming.StaticConstantPrefix: k
  readability-function-cognitive-complexity.IgnoreMacros: true
  readability-identifier-naming.TypedefCase: CamelCase
  readability-identifier-naming.UnionCase: CamelCase
  readability-identifier-naming.UsingCase: CamelCase
  misc-non-private-member-variables-in-classes: IgnorePublicMemberVariables
